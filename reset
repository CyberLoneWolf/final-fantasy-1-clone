equipmenu.cpp:	if (input->getCancel()) {
equipmenu.cpp:		input->resetCancel();
equipmenu.cpp:	if (input->getConfirm()) {
equipmenu.cpp:	if (input->getRButton() && !equippable.size()) {
equipmenu.cpp:	} else if (input->getLButton() && !equippable.size()) {
equipmenu.cpp:		if (input->rightPressed()) {
equipmenu.cpp:		} else if (input->leftPressed()) {
equipmenu.cpp:		if (input->downPressed()) {
equipmenu.cpp:		} else if (input->upPressed()) {
equipmenu.cpp:		if (input->downPressed() || input->rightPressed()) {
equipmenu.cpp:		} else if (input->upPressed() || input->leftPressed()) {
equipmenu.cpp:	input->resetAll();
itemmenu.cpp:	if (input->getCancel()) {
itemmenu.cpp:		input->resetCancel();
itemmenu.cpp:	if (input->getConfirm()) {
itemmenu.cpp:		input->resetConfirm();
itemmenu.cpp:		if (input->rightPressed()) {
itemmenu.cpp:		} else if (input->leftPressed()) {
itemmenu.cpp:		if (input->downPressed()) {
itemmenu.cpp:		} else if (input->upPressed()) {
itemmenu.cpp:		} else if (input->rightPressed()) {
itemmenu.cpp:		} else if (input->leftPressed()) {
itemmenu.cpp:	input->resetAll();
itemshop.cpp:	if (input->getCancel()) {
itemshop.cpp:		input->resetCancel();
itemshop.cpp:	if (input->getConfirm()) {
itemshop.cpp:		if (input->downPressed()) {
itemshop.cpp:		} else if (input->upPressed()) {
itemshop.cpp:		} else if (input->rightPressed()) {
itemshop.cpp:		} else if (input->leftPressed()) {
itemshop.cpp:		if (input->rightPressed()) {
itemshop.cpp:		} else if (input->leftPressed()) {
itemshop.cpp:		if (input->downPressed()) {
itemshop.cpp:		} else if (input->upPressed()) {
itemshop.cpp:		if (input->downPressed()) {
itemshop.cpp:		} else if (input->upPressed()) {
itemshop.cpp:		} else if (input->rightPressed()) {
itemshop.cpp:		} else if (input->leftPressed()) {
itemshop.cpp:	input->resetAll();
jobmenu.cpp:	if (input->getCancel()) {				// cancel button
jobmenu.cpp:		input->resetCancel();				// handled
jobmenu.cpp:	} else if (input->getConfirm()) {		// confirm button
jobmenu.cpp:		input->resetConfirm();				// handled
jobmenu.cpp:	if (input->rightPressed()) {
jobmenu.cpp:	} else if (input->leftPressed()) {
jobmenu.cpp:	} else if (input->upPressed()) {
jobmenu.cpp:	} else if (input->downPressed()) {
jobmenu.cpp:	input->resetAll();
magicmenu.cpp:	if (input->getCancel()) {
magicmenu.cpp:		input->resetCancel();
magicmenu.cpp:	if (input->getConfirm()) {
magicmenu.cpp:		input->resetConfirm();
magicmenu.cpp:	if (input->getRButton()) {
magicmenu.cpp:	} else if (input->getLButton()) {
magicmenu.cpp:		if (input->rightPressed()) {
magicmenu.cpp:		} else if (input->leftPressed()) {
magicmenu.cpp:		if (input->downPressed()) {
magicmenu.cpp:		} else if (input->upPressed()) {
magicmenu.cpp:		} else if (input->rightPressed()) {
magicmenu.cpp:		} else if (input->leftPressed()) {
magicmenu.cpp:	input->resetAll();
map.cpp:	input->setRepeatDelay();
map.cpp:	input->setRepeatDelay(1);
map.cpp:	if (input->getStart()) {
map.cpp:		input->resetStart();
namemenu.cpp:	if (input->getCancel()) {				// cancel button
namemenu.cpp:		input->resetCancel();				// handled
namemenu.cpp:	} else if (input->getConfirm()) {	// confirm button
namemenu.cpp:	} else if (input->getStart()) {			// start button
namemenu.cpp:		input->resetStart();
namemenu.cpp:	if (input->rightPressed()) {
namemenu.cpp:	} else if (input->leftPressed()) {
namemenu.cpp:	} else if (input->upPressed()) {
namemenu.cpp:	} else if (input->downPressed()) {
namemenu.cpp:	input->resetAll();
newmenu.cpp:	if (startError && input->anyKey()) {
newmenu.cpp:		input->resetAll();
newmenu.cpp:	if (input->getCancel()) {						// cancel button
newmenu.cpp:		input->resetCancel();						// handled
newmenu.cpp:	} else if (input->getConfirm()) {				// confirm button
newmenu.cpp:		input->resetConfirm();
newmenu.cpp:	} else if (input->getSelect() && !startConfirm) {
newmenu.cpp:	} else if (input->getStart()) {				// attempt to start the game
newmenu.cpp:		input->resetStart();
newmenu.cpp:	if (input->rightPressed() || input->leftPressed()) {
newmenu.cpp:	if (input->upPressed() || input->downPressed()) {
newmenu.cpp:		} else if (input->upPressed()) {		// move up a character
newmenu.cpp:	input->resetAll();
partymenu.cpp:	if (input->getCancel()) {
partymenu.cpp:		input->resetCancel();
partymenu.cpp:	if (input->getConfirm()) {
partymenu.cpp:		input->resetConfirm();
partymenu.cpp:	if (input->downPressed()) {
partymenu.cpp:	} else if (input->upPressed()) {
partymenu.cpp:	input->resetAll();
spellshop.cpp:	if (input->getCancel()) {
spellshop.cpp:		input->resetCancel();
spellshop.cpp:	if (input->getConfirm()) {
spellshop.cpp:		if (input->rightPressed()) {
spellshop.cpp:		} else if (input->leftPressed()) {
spellshop.cpp:		if (input->rightPressed()) {
spellshop.cpp:		} else if (input->leftPressed()) {
spellshop.cpp:		if (input->downPressed()) {
spellshop.cpp:		} else if (input->upPressed()) {
spellshop.cpp:	input->resetAll();
statusmenu.cpp:	if (input->getCancel()) {
statusmenu.cpp:		input->resetCancel();
statusmenu.cpp:	} else if (input->getRButton()) {
statusmenu.cpp:	} else if (input->getLButton()) {
statusmenu.cpp:	input->resetAll();
town.cpp:		if (input->upPressed() && !party->isPaused()) {
town.cpp:		} else if (input->downPressed() && !party->isPaused()) {
town.cpp:		} else if (input->rightPressed() && !party->isPaused()) {
town.cpp:		} else if (input->leftPressed() && !party->isPaused()) {
town.cpp:		if (input->getCancel()) {			// if cancel button down
town.cpp:		if (input->getConfirm()) {			// attempt to interact
town.cpp:			input->resetConfirm();			// reset confirm button
town.cpp:					input->setRepeatDelay();
town.cpp:					input->setRepeatDelay(1);
useitemmenu.cpp:	if (input->getCancel()) {
useitemmenu.cpp:		input->resetCancel();	// reset cancel input
useitemmenu.cpp:	if (input->getConfirm()) {
useitemmenu.cpp:		input->resetConfirm();
useitemmenu.cpp:	if (input->downPressed()) {
useitemmenu.cpp:	} else if (input->upPressed()) {
useitemmenu.cpp:	input->resetAll();
usespellmenu.cpp:	if (input->getCancel()) {
usespellmenu.cpp:		input->resetCancel();	// reset cancel input
usespellmenu.cpp:	if (input->getConfirm()) {
usespellmenu.cpp:		input->resetConfirm();
usespellmenu.cpp:	if (input->downPressed()) {
usespellmenu.cpp:	} else if (input->upPressed()) {
usespellmenu.cpp:	input->resetAll();
world.cpp:		if (input->upPressed()) {				// up pressed
world.cpp:		} else if (input->downPressed()) {
world.cpp:		} else if (input->rightPressed()) {
world.cpp:		} else if (input->leftPressed()) {
